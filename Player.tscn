[gd_scene load_steps=6 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]

[sub_resource type="GDScript" id=1]

script/source = "extends KinematicBody2D

#<-----  Class Variables  ----->#
export var movementSpeed: float = 300 #Speed the player moves
var targetRotation: float             #Holds the target rotation generated based on the movement vector
var tween: Tween                      #Holds the tween to tween the current rotation to the target rotation
var f11down = false                   #Holds if I'm holding down f11 to go fullscreen so it dosn't flicker
var movementVector = Vector2()        #Holds the direction the player is facing NOT the rotation

func _ready():
	tween = Tween.new() #Creates a new tween node
	add_child(tween) #Adds it as a child of the player
#warning-ignore:return_value_discarded 
#^-- This makes it so there isn't a warning in the debugger
	tween.start() #Starts the tween, but it won't do anything untill it's been told what to do

#warning-ignore:unused_argument
func _physics_process(delta: float) -> void:
	#<----
	if(Input.is_key_pressed(KEY_F11) && !f11down):
		OS.window_fullscreen = !OS.window_fullscreen
		f11down = true
	else:
		f11down = false
	#----> this handles the going fullscreen. This is temporary as there would be an option or a different place for it
	
	movementVector = Vector2() #clears the movement vector to 0,0 
	#<----
	movementVector.y -= Input.get_action_strength(\"move_up\")
	movementVector.y += Input.get_action_strength(\"move_down\")
	movementVector.x -= Input.get_action_strength(\"move_left\")
	movementVector.x += Input.get_action_strength(\"move_right\")
	#----> Gets the movement vector by input
#	if(movementVector.x != 0 || movementVector.y != 0):
#		$AnimationTree[\"parameters/conditions/running\"] = true
#warning-ignore:return_value_discarded
	move_and_slide(movementVector.normalized() * movementSpeed)

	#this match statement tries to get the direction of rotation based on movement direction
	match(Vector2(ceil(movementVector.x), ceil(movementVector.y))):
		Vector2(0, -1):
			if(rotation_degrees >= -180):
				targetRotation = 0
			else:
				targetRotation = -360
		Vector2(1, -1):
			if(rotation_degrees > -135):
				targetRotation = 45
			else:
				targetRotation = -315
		Vector2(1, 0):
			if(rotation_degrees > -90):
				targetRotation = 90
			else:
				targetRotation = -270
		Vector2(1, 1):
			if(rotation_degrees > -45):
				targetRotation = 135
			else:
				targetRotation = -225
		Vector2(0, 1):
			if(rotation_degrees > 0):
				targetRotation = 179.999
			else:
				targetRotation = -179.999
		Vector2(-1, -1):
			if(rotation_degrees > 45):
				targetRotation = 315
			else:
				targetRotation = -45
		Vector2(-1,0):
			if(rotation_degrees > 90):
				targetRotation = 270
			else:
				targetRotation = -90
		Vector2(-1, 1):
			if(rotation_degrees > 135):
				targetRotation = 225
			else:
				targetRotation = -135

	rotation_degrees = fmod(rotation_degrees, 360) #mods the var so it's always between 0 and 360
#warning-ignore:return_value_discarded
	tween.interpolate_property(self, \"rotation_degrees\", null, targetRotation, .1, Tween.TRANS_LINEAR, Tween.EASE_IN_OUT)
#	print(rotation_degrees)

func _on_Area2D_area_entered(area: Area2D) -> void:
	print(area, \" AAAA\")
	area.get_parent().queue_free()
"

[sub_resource type="RectangleShape2D" id=2]

custom_solver_bias = 0.0
extents = Vector2( 0, 0 )

[sub_resource type="RectangleShape2D" id=3]

custom_solver_bias = 0.0
extents = Vector2( 0, 0 )

[sub_resource type="SpriteFrames" id=4]

animations = [ {
"frames": [ ExtResource( 1 ) ],
"loop": true,
"name": "default",
"speed": 5.0
} ]

[node name="Player" type="KinematicBody2D" groups=[
"Player",
]]
input_pickable = false
collision_layer = 1
collision_mask = 1
collision/safe_margin = 0.08
motion/sync_to_physics = false
script = SubResource( 1 )
movementSpeed = null

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 2 )
disabled = true

[node name="Area2D" type="Area2D" parent="."]
input_pickable = true
gravity_vec = Vector2( 0, 1 )
gravity = 98.0
linear_damp = 0.1
angular_damp = 1.0
audio_bus_override = false
audio_bus_name = "Master"

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
shape = SubResource( 3 )
disabled = true

[node name="AnimatedSprite" type="AnimatedSprite" parent="."]
frames = SubResource( 4 )
animation = "default"

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
root_node = NodePath("..")
autoplay = ""
playback_process_mode = 1
playback_default_blend_time = 0.0
playback_speed = 1.0
blend_times = [  ]

[node name="AnimationTreePlayer" type="AnimationTreePlayer" parent="."]
playback_process_mode = 1
master_player = NodePath("")
base_path = NodePath("..")
active = false
data = {
"active": false,
"connections": [  ],
"master": NodePath(""),
"nodes": [ {
"id": "out",
"position": Vector2( 40, 40 ),
"type": "output"
} ]
}

