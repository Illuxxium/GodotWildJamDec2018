[gd_scene load_steps=45 format=2]

[ext_resource path="res://Graphics/Ness Sprites/ness_down1.tres" type="Texture" id=1]
[ext_resource path="res://Graphics/Ness Sprites/ness_right_1.tres" type="Texture" id=2]
[ext_resource path="res://Graphics/Ness Sprites/ness_right_2.tres" type="Texture" id=3]
[ext_resource path="res://Graphics/Ness Sprites/ness_right_3.tres" type="Texture" id=4]
[ext_resource path="res://Graphics/Ness Sprites/ness_right_4.tres" type="Texture" id=5]
[ext_resource path="res://Graphics/Ness Sprites/ness_down2.tres" type="Texture" id=6]
[ext_resource path="res://Graphics/Ness Sprites/ness_down3.tres" type="Texture" id=7]
[ext_resource path="res://Graphics/Ness Sprites/ness_down4.tres" type="Texture" id=8]
[ext_resource path="res://Graphics/Ness Sprites/ness_left_1.tres" type="Texture" id=9]
[ext_resource path="res://Graphics/Ness Sprites/ness_left_2.tres" type="Texture" id=10]
[ext_resource path="res://Graphics/Ness Sprites/ness_left_3.tres" type="Texture" id=11]
[ext_resource path="res://Graphics/Ness Sprites/ness_left_4.tres" type="Texture" id=12]
[ext_resource path="res://Graphics/Ness Sprites/ness_up_1.tres" type="Texture" id=13]
[ext_resource path="res://Graphics/Ness Sprites/ness_up_2.tres" type="Texture" id=14]
[ext_resource path="res://Graphics/Ness Sprites/ness_up_3.tres" type="Texture" id=15]
[ext_resource path="res://Graphics/Ness Sprites/ness_up_4.tres" type="Texture" id=16]

[sub_resource type="GDScript" id=1]

script/source = "extends KinematicBody2D

#<-----  Class Variables  ----->#
export var movementSpeed: float = 300 #Speed the player moves
var targetRotation: float             #Holds the target rotation generated based on the movement vector
var tween: Tween                      #Holds the tween to tween the current rotation to the target rotation
var f11down = false                   #Holds if I'm holding down f11 to go fullscreen so it dosn't flicker
var movementVector = Vector2()        #Holds the direction the player is facing NOT the rotation

func _ready():
	tween = Tween.new() #Creates a new tween node
	add_child(tween) #Adds it as a child of the player
#warning-ignore:return_value_discarded 
#^-- This makes it so there isn't a warning in the debugger
	tween.start() #Starts the tween, but it won't do anything untill it's been told what to do

#warning-ignore:unused_argument
func _physics_process(delta: float) -> void:
	#<----
	if(Input.is_key_pressed(KEY_F11) && !f11down):
		OS.window_fullscreen = !OS.window_fullscreen
		f11down = true
	else:
		f11down = false
	#----> this handles the going fullscreen. This is temporary as there would be an option or a different place for it
	
	movementVector = Vector2() #clears the movement vector to 0,0 
	#<----
	movementVector.y -= Input.get_action_strength(\"move_up\")
	movementVector.y += Input.get_action_strength(\"move_down\")
	movementVector.x -= Input.get_action_strength(\"move_left\")
	movementVector.x += Input.get_action_strength(\"move_right\")
	#----> Gets the movement vector by input
#	if(movementVector.x != 0 || movementVector.y != 0):
#		$AnimationTree[\"parameters/conditions/running\"] = true
#warning-ignore:return_value_discarded
	move_and_slide(movementVector.normalized() * movementSpeed)
	
	print(movementVector, \"    \", $AnimatedSprite.animation)
	match(movementVector):
		Vector2(0, 0):
			if($AnimatedSprite.animation == \"default\"):
				$AnimatedSprite.play(\"default\") 
		Vector2(1, 0):
			if($AnimatedSprite.animation == \"move_right\"):
				$AnimatedSprite.play(\"move_right\")
		Vector2(1, 1):
			if($AnimatedSprite.animation == \"move_down_right\"):
				$AnimatedSprite.play(\"move_down_right\")
		Vector2(0, 1):
			if($AnimatedSprite.animation == \"move_down\"):
				$AnimatedSprite.play(\"move_down\")
		Vector2(-1, 1):
			if($AnimatedSprite.animation == \"move_down_left\"):
				$AnimatedSprite.play(\"move_down_left\")
		Vector2(-1, 0):
			if($AnimatedSprite.animation == \"move_left\"):
				$AnimatedSprite.play(\"move_left\")
		Vector2(-1, -1):
			if($AnimatedSprite.animation == \"move_up_left\"):
				$AnimatedSprite.play(\"move_up_left\")
		Vector2(0, -1):
			if($AnimatedSprite.animation == \"move_up\"):
				$AnimatedSprite.play(\"move_up\")
		Vector2(1, -1):
			if($AnimatedSprite.animation == \"move_up_right\"):
				$AnimatedSprite.play(\"move_up_right\")
		_:
			if($AnimatedSprite.animation == \"default\"):
				$AnimatedSprite.play(\"default\")
	if($AnimatedSprite.animation != \"default\"):
		breakpoint
#	#this match statement tries to get the direction of rotation based on movement direction
#	match(Vector2(ceil(movementVector.x), ceil(movementVector.y))):
#		Vector2(0, -1):
#			if(rotation_degrees >= -180):
#				targetRotation = 0
#			else:
#				targetRotation = -360
#		Vector2(1, -1):
#			if(rotation_degrees > -135):
#				targetRotation = 45
#			else:
#				targetRotation = -315
#		Vector2(1, 0):
#			if(rotation_degrees > -90):
#				targetRotation = 90
#			else:
#				targetRotation = -270
#		Vector2(1, 1):
#			if(rotation_degrees > -45):
#				targetRotation = 135
#			else:
#				targetRotation = -225
#		Vector2(0, 1):
#			if(rotation_degrees > 0):
#				targetRotation = 179.999
#			else:
#				targetRotation = -179.999
#		Vector2(-1, -1):
#			if(rotation_degrees > 45):
#				targetRotation = 315
#			else:
#				targetRotation = -45
#		Vector2(-1,0):
#			if(rotation_degrees > 90):
#				targetRotation = 270
#			else:
#				targetRotation = -90
#		Vector2(-1, 1):
#			if(rotation_degrees > 135):
#				targetRotation = 225
#			else:
#				targetRotation = -135
#
#	rotation_degrees = fmod(rotation_degrees, 360) #mods the var so it's always between 0 and 360
##warning-ignore:return_value_discarded
#	tween.interpolate_property(self, \"rotation_degrees\", null, targetRotation, .1, Tween.TRANS_LINEAR, Tween.EASE_IN_OUT)
##	print(rotation_degrees)

func _on_Area2D_area_entered(area: Area2D) -> void:
	print(area, \" AAAA\")
	area.get_parent().queue_free()
"

[sub_resource type="RectangleShape2D" id=2]

custom_solver_bias = 0.0
extents = Vector2( 0, 0 )

[sub_resource type="RectangleShape2D" id=3]

custom_solver_bias = 0.0
extents = Vector2( 0, 0 )

[sub_resource type="SpriteFrames" id=4]

animations = [ {
"frames": [ ExtResource( 1 ) ],
"loop": true,
"name": "default",
"speed": 5.0
}, {
"frames": [ ExtResource( 2 ), ExtResource( 3 ), ExtResource( 4 ), ExtResource( 5 ) ],
"loop": true,
"name": "move_right",
"speed": 5.0
}, {
"frames": [ ExtResource( 1 ), ExtResource( 6 ), ExtResource( 7 ), ExtResource( 8 ) ],
"loop": true,
"name": "move_down",
"speed": 5.0
}, {
"frames": [ ExtResource( 9 ), ExtResource( 10 ), ExtResource( 11 ), ExtResource( 12 ) ],
"loop": true,
"name": "move_left",
"speed": 5.0
}, {
"frames": [ ExtResource( 13 ), ExtResource( 14 ), ExtResource( 15 ), ExtResource( 16 ) ],
"loop": true,
"name": "move_up",
"speed": 5.0
} ]

[sub_resource type="Animation" id=5]

resource_name = "idle"
length = 0.001
loop = false
step = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath("AnimatedSprite:animation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ "default" ]
}

[sub_resource type="Animation" id=6]

resource_name = "move_down"
length = 1.0
loop = false
step = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath("AnimatedSprite:animation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ "move_down" ]
}

[sub_resource type="Animation" id=7]

resource_name = "move_left"
length = 1.0
loop = false
step = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath("AnimatedSprite:animation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ "move_left" ]
}

[sub_resource type="Animation" id=8]

resource_name = "move_right"
length = 1.0
loop = false
step = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath("AnimatedSprite:animation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ "move_right" ]
}

[sub_resource type="Animation" id=9]

resource_name = "move_up"
length = 0.001
loop = false
step = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath("AnimatedSprite:animation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ "move_up" ]
}

[sub_resource type="AnimationNodeStateMachine" id=10]

transitions = [  ]
start_node = ""
end_node = ""
graph_offset = Vector2( 200, 79 )

[sub_resource type="AnimationNodeAnimation" id=11]

filter_enabled = false
filters = [  ]
animation = "idle"

[sub_resource type="AnimationNodeAnimation" id=12]

filter_enabled = false
filters = [  ]
animation = "move_down"

[sub_resource type="AnimationNodeAnimation" id=13]

filter_enabled = false
filters = [  ]
animation = "move_left"

[sub_resource type="AnimationNodeAnimation" id=14]

filter_enabled = false
filters = [  ]
animation = "move_right"

[sub_resource type="AnimationNodeAnimation" id=15]

filter_enabled = false
filters = [  ]
animation = "move_up"

[sub_resource type="AnimationNodeStateMachineTransition" id=16]

switch_mode = 0
auto_advance = false
advance_condition = ""
xfade_time = 0.0
priority = 1
disabled = false

[sub_resource type="AnimationNodeStateMachineTransition" id=17]

switch_mode = 0
auto_advance = false
advance_condition = ""
xfade_time = 0.0
priority = 1
disabled = false

[sub_resource type="AnimationNodeStateMachineTransition" id=18]

switch_mode = 0
auto_advance = false
advance_condition = ""
xfade_time = 0.0
priority = 1
disabled = false

[sub_resource type="AnimationNodeStateMachineTransition" id=19]

switch_mode = 0
auto_advance = false
advance_condition = ""
xfade_time = 0.0
priority = 1
disabled = false

[sub_resource type="AnimationNodeStateMachineTransition" id=20]

switch_mode = 0
auto_advance = false
advance_condition = ""
xfade_time = 0.0
priority = 1
disabled = false

[sub_resource type="AnimationNodeStateMachineTransition" id=21]

switch_mode = 0
auto_advance = false
advance_condition = ""
xfade_time = 0.0
priority = 1
disabled = false

[sub_resource type="AnimationNodeStateMachineTransition" id=22]

switch_mode = 0
auto_advance = false
advance_condition = ""
xfade_time = 0.0
priority = 1
disabled = false

[sub_resource type="AnimationNodeStateMachineTransition" id=23]

switch_mode = 0
auto_advance = false
advance_condition = ""
xfade_time = 0.0
priority = 1
disabled = false

[sub_resource type="AnimationNodeStateMachineTransition" id=24]

switch_mode = 0
auto_advance = false
advance_condition = ""
xfade_time = 0.0
priority = 1
disabled = false

[sub_resource type="AnimationNodeStateMachineTransition" id=25]

switch_mode = 0
auto_advance = false
advance_condition = ""
xfade_time = 0.0
priority = 1
disabled = false

[sub_resource type="AnimationNodeStateMachine" id=26]

states/StateMachine/node = SubResource( 10 )
states/StateMachine/position = Vector2( 527, 113 )
states/idle/node = SubResource( 11 )
states/idle/position = Vector2( 152, 59 )
states/move_down/node = SubResource( 12 )
states/move_down/position = Vector2( 527, 273 )
states/move_left/node = SubResource( 13 )
states/move_left/position = Vector2( 152, 180 )
states/move_right/node = SubResource( 14 )
states/move_right/position = Vector2( 809, 113 )
states/move_up/node = SubResource( 15 )
states/move_up/position = Vector2( 527, -39 )
transitions = [ "StateMachine", "move_left", SubResource( 16 ), "move_left", "StateMachine", SubResource( 17 ), "move_down", "StateMachine", SubResource( 18 ), "StateMachine", "move_down", SubResource( 19 ), "StateMachine", "move_right", SubResource( 20 ), "move_right", "StateMachine", SubResource( 21 ), "StateMachine", "move_up", SubResource( 22 ), "move_up", "StateMachine", SubResource( 23 ), "idle", "StateMachine", SubResource( 24 ), "StateMachine", "idle", SubResource( 25 ) ]
start_node = "idle"
end_node = ""
graph_offset = Vector2( -100, -78 )

[sub_resource type="AnimationNodeStateMachinePlayback" id=27]

resource_local_to_scene = true

[sub_resource type="AnimationNodeStateMachinePlayback" id=28]

resource_local_to_scene = true

[node name="Player" type="KinematicBody2D" groups=[
"Player",
]]
input_pickable = false
collision_layer = 1
collision_mask = 1
collision/safe_margin = 0.08
motion/sync_to_physics = false
script = SubResource( 1 )
movementSpeed = null

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 2 )
disabled = true

[node name="Area2D" type="Area2D" parent="."]
input_pickable = true
gravity_vec = Vector2( 0, 1 )
gravity = 98.0
linear_damp = 0.1
angular_damp = 1.0
audio_bus_override = false
audio_bus_name = "Master"

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
shape = SubResource( 3 )
disabled = true

[node name="AnimatedSprite" type="AnimatedSprite" parent="."]
frames = SubResource( 4 )
animation = "default"
playing = true

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
root_node = NodePath("..")
autoplay = "idle"
playback_process_mode = 1
playback_default_blend_time = 0.0
playback_speed = 1.0
anims/idle = SubResource( 5 )
anims/move_down = SubResource( 6 )
anims/move_left = SubResource( 7 )
anims/move_right = SubResource( 8 )
anims/move_up = SubResource( 9 )
next/idle = "idle"
blend_times = [  ]

[node name="AnimationTree" type="AnimationTree" parent="."]
tree_root = SubResource( 26 )
anim_player = NodePath("../AnimationPlayer")
active = false
process_mode = 1
root_motion_track = NodePath("")
parameters/playback = SubResource( 27 )
parameters/StateMachine/playback = SubResource( 28 )

